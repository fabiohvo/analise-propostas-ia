"""
ANALISADOR CONTRATUAL VALE - v1.0.2
Corre√ß√£o definitiva do erro 'bytearray' object has no attribute 'encode'
"""

import streamlit as st
from pypdf import PdfReader
import docx2txt
from openai import OpenAI
import google.generativeai as genai
from fpdf import FPDF
from dotenv import load_dotenv
import os
import time

# ================= CONFIGURA√á√ÉO =================
st.set_page_config(
    page_title="Analisador Contratual Vale 1.0.2",
    page_icon="üìë",
    layout="wide"
)

MAX_FILE_SIZE_MB = 25
TIMEOUT_API = 300

@st.cache_resource
def init_services():
    """Inicializa conex√µes com APIs"""
    services = {}
    load_dotenv()
    
    if os.getenv("OPENAI_API_KEY") or st.secrets.get("openai", {}).get("api_key"):
        services["openai"] = OpenAI(
            api_key=os.getenv("OPENAI_API_KEY") or st.secrets["openai"]["api_key"],
            timeout=TIMEOUT_API
        )
    
    if os.getenv("GEMINI_API_KEY") or st.secrets.get("gemini", {}).get("api_key"):
        genai.configure(api_key=os.getenv("GEMINI_API_KEY") or st.secrets["gemini"]["api_key"])
        services["gemini"] = genai
    
    return services

def ler_arquivo(file):
    """L√™ PDF/DOCX com tratamento de erros"""
    try:
        if file.size > MAX_FILE_SIZE_MB * 1024 * 1024:
            raise ValueError(f"Arquivo muito grande (limite: {MAX_FILE_SIZE_MB}MB)")
        
        if file.name.endswith('.pdf'):
            reader = PdfReader(file)
            return "\n".join([page.extract_text() or "" for page in reader.pages[:50]])
        elif file.name.endswith('.docx'):
            return docx2txt.process(file)[:500000]
        raise ValueError("Formato inv√°lido (use PDF ou DOCX)")
    except Exception as e:
        raise ValueError(f"Erro ao ler {file.name}: {str(e)}")

def gerar_pdf(conteudo):
    """Gera PDF de forma compat√≠vel com todas vers√µes do fpdf2"""
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=10)
    pdf.multi_cell(0, 8, conteudo)
    
    # Solu√ß√£o universal para bytearray/string
    pdf_output = pdf.output(dest='S')
    if isinstance(pdf_output, str):
        return pdf_output.encode('latin1')
    return pdf_output  # J√° √© bytes

def analisar_contrato(contrato_base, proposta, nome_proposta):
    """L√≥gica de an√°lise contratual"""
    services = init_services()
    
    prompt = f"""
    [AN√ÅLISE CONTRATUAL VALE]
    Compare:
    - CONTRATO BASE: {contrato_base[:30000]}
    - PROPOSTA ({nome_proposta}): {proposta[:30000]}
    
    Entregue:
    1. Conformidade (0-100%)
    2. Itens cr√≠ticos faltantes
    3. Recomenda√ß√µes espec√≠ficas
    """
    
    if "openai" in services:
        try:
            response = services["openai"].chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2
            )
            return response.choices[0].message.content
        except Exception as e:
            st.warning(f"OpenAI falhou: {str(e)}")
    
    if "gemini" in services:
        try:
            model = genai.GenerativeModel('gemini-1.5-pro')
            response = model.generate_content(prompt)
            return response.text
        except Exception as e:
            st.warning(f"Gemini falhou: {str(e)}")
    
    raise Exception("Todos os servi√ßos de IA falharam (verifique cr√©ditos)")

def main():
    st.title("üìë Analisador Contratual Vale 1.0.2")
    
    # Upload de documentos
    contrato_base = st.file_uploader("Contrato Base Vale", type=["pdf", "docx"])
    propostas = st.file_uploader("Propostas Comerciais", type=["pdf", "docx"], accept_multiple_files=True)
    
    if st.button("Executar An√°lise", type="primary") and contrato_base and propostas:
        try:
            with st.spinner("Processando contrato base..."):
                texto_base = ler_arquivo(contrato_base)
            
            resultados = []
            for proposta in propostas:
                try:
                    with st.spinner(f"Analisando {proposta.name}..."):
                        texto_proposta = ler_arquivo(proposta)
                        analise = analisar_contrato(texto_base, texto_proposta, proposta.name)
                        
                        with st.expander(f"Resultado: {proposta.name}", expanded=False):
                            st.markdown(analise)
                            
                            # Gera√ß√£o de PDF corrigida
                            pdf_bytes = gerar_pdf(analise)
                            st.download_button(
                                "üì• Baixar Relat√≥rio",
                                data=pdf_bytes,
                                file_name=f"Vale_Analise_{proposta.name[:45]}.pdf",
                                mime="application/pdf"
                            )
                    
                    resultados.append(proposta.name)
                except Exception as e:
                    st.error(f"Falha na proposta {proposta.name}: {str(e)}")
                    continue
            
            st.success(f"‚úÖ An√°lise conclu√≠da para {len(resultados)} proposta(s)")
        
        except Exception as e:
            st.error(f"Erro cr√≠tico: {str(e)}")

if __name__ == "__main__":
    main()
